package templates

import (
    "fmt"
    "time"
    "strconv"

    "go-router/models"
)    

func FormatNorwegianDate(t time.Time) string {
    norwegianMonths := []string{
        "jan.", "feb.", "mars", "april", "mai", "juni",
        "juli", "aug.", "sep.", "okt.", "nov.", "des.",
    }
    currentYear := time.Now().Year()
    day := t.Day()
    month := norwegianMonths[int(t.Month())-1]

    if t.Year() != currentYear {
        return fmt.Sprintf("%d. %s %d", day, month, t.Year())
    }
    return fmt.Sprintf("%d. %s", day, month)
}

templ List(bars []models.Bar) {
    <section id="list">
        <div class="flex flex-col gap-1">
        for index, bar := range bars {
            <div x-data="{ open: false }" @click.outside="open = false" class="bg-violet-200 dark:bg-emerald-900 rounded-lg shadow-lg w-full cursor-pointer">
                <div @click="open = ! open">
                    <div class="flex justify-between font-semibold border-b-2 border-violet-300 dark:border-emerald-950 py-2 pr-4 rounded-lg">
                        <span class="flex flex-grow justify-left items-center min-w-5">
                            <svg 
                                viewBox="0 0 24 24" 
                                xmlns="http://www.w3.org/2000/svg" 
                                fill="#000000"
                                class="w-7 transition-transform duration-300 ease-in-out"
                                :class="{ 'rotate-180': open }"
                            >
                                <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                                <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                                <g id="SVGRepo_iconCarrier">
                                    <g>
                                        <path fill="none" d="M0 0h24v24H0z"></path>
                                        <path d="M12 15l-4.243-4.243 1.415-1.414L12 12.172l2.828-2.829 1.415 1.414z"></path>
                                    </g>
                                </g>
                            </svg>
                            <span class="text-left">{bar.Name}</span>
                        </span>
                        <span>{setPrefix(bar)}{strconv.Itoa(int(bar.CurrentPint))},- </span>
                    </div>
                    <div x-show="open" x-collapse>
                        <div class="mt-1 px-4 pb-2 w-full">
                            @card(bar, index)
                        </div>
                    </div>
                </div>
            </div>
        }
        </div>
    </section>
}

templ card(bar models.Bar, index int) {
    <div>
        <p>
            <span>Pris: </span>
            <span>{strconv.Itoa(int(bar.CurrentPrice))},- </span>
            <span>Størrelse: </span>
            <span>{strconv.FormatFloat(bar.Size, 'f', 1, 64)}l</span>
        </p>
        <p>
            <span>Bryggeri: </span>
            <span>{bar.Brewery} </span>
            <span>Pris sjekket: </span>
            if bar.HappyChecked != nil {
                <span id={"checked_" + strconv.Itoa(int(index))}>{FormatNorwegianDate(*bar.HappyChecked)}</span>
                <span><button hx-post={"/api/v1/confirm-price?type=hkey&id=" + strconv.Itoa(int(bar.HkeyID))} hx-target="#toast">Bekreft pris</button></span>
            } else {
                <span id={"checked_" + strconv.Itoa(int(index))}>{FormatNorwegianDate(bar.PriceChecked)}</span>
                <span><button hx-post={"/api/v1/confirm-price?type=bar&id=" + strconv.Itoa(int(bar.ID))} hx-target="#toast">Bekreft pris</button></span>
            }
        </p>
        <p>
            <span>Adresse: </span>
            <span>{bar.Address}</span>
        </p>
        if bar.UntilTime != nil {
            <p>
                <span>Pris gyldig til: </span>
                <span>kl. {bar.UntilTime.Format("15:04")} </span>
                <span>Vanlig pris: </span>
                <span>{strconv.Itoa(int(bar.Price))},- for {strconv.FormatFloat(bar.Size, 'f', 1, 64)}l</span>
            </p>
        }
    </div>
}

func setPrefix(bar models.Bar) string {
    var prefix string
    if bar.HappyChecked != nil {
        prefix += string('⏰')
    }
    if bar.CurrentPint != bar.CurrentPrice {
        prefix += string('*')
    }
    return prefix
}